name: Continuous integration

on:
  push:
    branches:
      - main
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  typescript:
    name: typescript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .node-version
        id: node-version
        run: echo "node-version=$(cat .node-version)" >> $GITHUB_OUTPUT
      - name: install node
        uses: actions/setup-node@v5
        with:
          cache: yarn
          node-version: ${{ steps.node-version.outputs.node-version }}
      - name: yarn install
        run: yarn install
      - run: yarn run react-router typegen
      - name: type check
        run: yarn run tsc --noEmit
  vitest:
    name: vitest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .node-version
        id: node-version
        run: echo "node-version=$(cat .node-version)" >> $GITHUB_OUTPUT
      - name: install node
        uses: actions/setup-node@v5
        with:
          cache: yarn
          node-version: ${{ steps.node-version.outputs.node-version }}
      - name: yarn install
        run: yarn install
      - name: build
        run: COVERAGE=true yarn run test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: always() # always run even if the previous step fails
        with:
          check_name: "Vitest Report"
          report_paths: "test/reports/TEST-*.xml"
      - name: Archive HTML test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vitest-reports
          path: test/html_reports/*
      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vitest-coverage
          path: coverage/*
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Build (and push to registry, if on main)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/main' }}
          load: ${{ !(github.event_name == 'push' && github.event.ref == 'refs/heads/main') }}
          platforms: linux/amd64
          tags: |
            ghcr.io/neinteractiveliterature/rotator:${{ github.sha }}
          build-args: |
            REVISION=${{ github.sha }}
  update-release-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    needs:
      - typescript
      - vitest
      - docker-build
    outputs:
      name: ${{ steps.release-drafter.outputs.name }}
      html_url: ${{ steps.release-drafter.outputs.html_url }}
    steps:
      - uses: release-drafter/release-drafter@v6
        id: release-drafter
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
