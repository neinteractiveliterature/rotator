// generated by react-router-hono-server/dev
import { createHonoServer } from "react-router-hono-server/node";
import TwilioClient from "twilio";
import "react-router";
import "dotenv/config";
import { validateRequest } from "twilio/lib/webhooks/webhooks";
import { drizzle } from "drizzle-orm/node-postgres";
import * as schema from "app/db/schema";
import type { CountryCode } from "libphonenumber-js";
import { createTransport } from "nodemailer";

async function validateTwilioWebhook(request: Request) {
  const params = Object.fromEntries((await request.formData()).entries());
  if (process.env.SKIP_TWILIO_WEBHOOK_VALIDATION) {
    return params;
  }

  const twilioSignature = request.headers.get("X-Twilio-Signature");
  if (!twilioSignature) {
    throw new Response(
      "No signature header error - X-Twilio-Signature header does not exist, maybe this request is not coming from Twilio.",
      {
        status: 400,
        headers: {
          "Content-Type": "text/plain",
        },
      }
    );
  }

  const webhookUrl = new URL(request.url);
  if (request.headers.get("X-Forwarded-Proto")) {
    webhookUrl.protocol = request.headers.get("X-Forwarded-Proto") ?? "";
  }

  const isValid = validateRequest(
    process.env.TWILIO_AUTH_TOKEN ?? "",
    twilioSignature,
    webhookUrl.toString(),
    params
  );

  if (!isValid) {
    throw new Response("Twilio Request Validation Failed.", {
      status: 403,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  }

  return params;
}

const db = drizzle({
  connection: process.env.DATABASE_URL!,
  casing: "snake_case",
  schema,
  logger: true,
});

const mailTransport = createTransport({
  url: process.env.SMTP_URL,
});

declare module "react-router" {
  interface AppLoadContext {
    db: typeof db;
    defaultCountryCode: CountryCode;
    mailTransport: typeof mailTransport;
    twilioClient: TwilioClient.Twilio;
    validateTwilioWebhook: typeof validateTwilioWebhook;
  }
}

export default await createHonoServer({
  getLoadContext() {
    const twilioClient = TwilioClient(
      process.env.TWILIO_SID,
      process.env.TWILIO_AUTH_TOKEN
    );
    return {
      db,
      defaultCountryCode:
        (process.env.DEFAULT_COUNTRY_CODE as CountryCode | undefined) ?? "US",
      mailTransport,
      twilioClient,
      validateTwilioWebhook,
    };
  },
});
